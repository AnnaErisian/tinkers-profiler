buildscript {
    repositories {
        jcenter()
        maven { url = "http://files.minecraftforge.net/maven" }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.3-SNAPSHOT'
    }
}
apply plugin: 'net.minecraftforge.gradle.forge'
//Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.

version = "1.0.2"
group = "blue.thejester.tinkerprofiler" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "tinkerprofiler"

repositories {
	maven {
		url 'http://dvs1.progwml6.com/files/maven'
	}
	maven {
		url = 'http://maven.covers1624.net'
	}
    maven {
        url "http://maven.blamejared.com"
    }
    maven {
        url "https://maven.chaosfield.at"
    }
    maven {
        url "https://minecraft.curseforge.com/api/maven/"
    }
    maven {
        url "http://maven.mcmoddev.com"
    }
    maven {
        url "https://tehnut.info/maven"
    }
}

sourceCompatibility = targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.
compileJava {
    sourceCompatibility = targetCompatibility = '1.8'
}

minecraft {
    version = "1.12.2-14.23.5.2847"
    runDir = "run"
    
    // the mappings can be changed at any time, and must be in the following format.
    // snapshot_YYYYMMDD   snapshot are built nightly.
    // stable_#            stables are built at the discretion of the MCP team.
    // Use non-default mappings at your own risk. they may not always work.
    // simply re-run your setup task after changing the mappings to update your workspace.
    mappings = "stable_39"
    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.
}

dependencies {
    // you may put jars on which you depend on in ./libs
    // or you may define them like so..
    //compile "some.group:artifact:version:classifier"
    //compile "some.group:artifact:version"
      
    // real examples
    //compile 'com.mod-buildcraft:buildcraft:6.0.8:dev'  // adds buildcraft to the dev env
    //compile 'com.googlecode.efficient-java-matrix-library:ejml:0.24' // adds ejml to the dev env

    // the 'provided' configuration is for optional dependencies that exist at compile-time but might not at runtime.
    //provided 'com.mod-buildcraft:buildcraft:6.0.8:dev'

    // the deobf configurations:  'deobfCompile' and 'deobfProvided' are the same as the normal compile and provided,
    // except that these dependencies get remapped to your current MCP mappings
    //deobfCompile 'com.mod-buildcraft:buildcraft:6.0.8:dev'
    //deobfProvided 'com.mod-buildcraft:buildcraft:6.0.8:dev'

    // for more info...
    // http://www.gradle.org/docs/current/userguide/artifact_dependencies_tutorial.html
    // http://www.gradle.org/docs/current/userguide/dependency_management.html

    compile "slimeknights.mantle:Mantle:1.12-1.3.3.55"
    compile "slimeknights:TConstruct:1.12.2-2.13.0.171"


    deobfCompile "mcp.mobius.waila:Hwyla:1.8.26-B41_1.12.2"
//    deobfCompile "plustic:plustic:7.1.6.1"

    compile files("./libs/conarm-1.12.2-1.2.5.3.jar")
    //compile files("./libs/CraftTweaker2-1.12-4.1.19.jar")
    //compile files("./libs/aether_legacy-1.12.2-v1.4.4.jar")
    //compile files("./libs/astralsorcery-1.12.2-1.10.20.jar")
    //compile files("./libs/Botania+r1.10-363.jar")
    //compile files("./libs/TheBetweenlands-3.5.4-universal.jar")
    //compile files("./libs/tinkersaether-1.3.0.jar")
    //compile files("./libs/twilightforest-1.12.2-3.10.1013-universal.jar")
    //compile files("./libs/CoFHCore-1.12.2-4.6.3.27-universal")
    //compile files("./libs/CoFHWorld-1.12.2-1.3.1.7-universal")
    //compile files("./libs/ThermalFoundation-1.12.2-2.6.3.27-universal")
    //compile files("./libs/RedstoneFlux-1.12-2.1.0.6-universal")
}


import org.apache.tools.ant.filters.ReplaceTokens
task replaceVersion(type: Copy) {
    from 'src/meta/java'
    into "$buildDir/__generated_src"
    filter(ReplaceTokens, tokens: [
            'VERSION': project.version
    ])
}

compileJava.source replaceVersion.outputs.files
compileJava.dependsOn replaceVersion

processResources {
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
                
        // replace version and mcversion
        expand 'version':project.version, 'mcversion':project.minecraft.version
    }
        
    // copy everything else except the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

//Uncomment for testing in dev, comment when publishing
//sourceSets {
//    main { output.resourcesDir = output.classesDir }
//}
